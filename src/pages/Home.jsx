import React from 'react';
import qs from 'qs';
import { useSelector, useDispatch } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import { filterSelector, setFilters } from '../redux/slices/filterSlice';
import { setVisible, fetchTeas, teaSelector } from '../redux/slices/teaSlice';

import Category from '../components/Category';
import Sort, { sortList } from '../components/Sort';
import Skeleton from '../components/TeaCard/Skeleton';
import TeaCard from '../components/TeaCard';
import Search from '../components/Search';

const Home = () => {
	const navigate = useNavigate();
	const dispatch = useDispatch();
	const isSearch = React.useRef(false);
	const isMounted = React.useRef(false);
	const { categoryId, sort, searchValue } = useSelector(filterSelector);
	const { teaItems, status, visible, loadCount } = useSelector(teaSelector);

	// useWhyDidYouUpdate('Home category', { categoryId });

	const showMore = () => {
		//* –ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
		const newVisible = visible + loadCount;
		dispatch(setVisible(newVisible > teaItems.length ? teaItems.length : newVisible));
	};

	const getFetchTeas = async () => {
		//* –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Å–∫–µ–ª–µ—Ç–æ–Ω–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Ü—Ü —Å –±—ç–∫–∞.
		const sortBy = sort.sortProperty.replace('-', '');
		const order = sort.sortProperty.includes('-') ? 'asc' : 'desc';
		const category = categoryId > 0 ? `${categoryId}` : '';
		//* X—Ä–∞–Ω–∏–º –≤ redux —Å–æ—Å—Ç–æ—è–Ω–∏–µ async –∑–∞–ø—Ä–æ—Å–∞ –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ–≥–æ.
		dispatch(
			fetchTeas({
				sortBy,
				order,
				category,
			}),
		);
	};

	React.useEffect(() => {
		//* –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä.
		//*–°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏(–ø–∞—Ä—Å–∏–º –µ—ë). –î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º useNavigate from rrd.
		if (isMounted.current) {
			const queryString = qs.stringify({
				sortProperty: sort.sortProperty,
				categoryId,
			});
			navigate(`?${queryString}`);
		}
		isMounted.current = true;
	}, [categoryId, sort.sortProperty]);

	React.useEffect(() => {
		//*–ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ REDUX.
		if (window.location.search) {
			const params = qs.parse(window.location.search.substring(1));
			const sort = sortList.find((obj) => obj.sortProperty === params.sortProperty);
			dispatch(
				setFilters({
					...params,
					sort,
				}),
			);
			isSearch.current = true;
		}
	}, []);

	React.useEffect(() => {
		//* –ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∏—Ü—Ü—ã.
		window.scrollTo(0, 0);
		if (!isSearch.current) {
			getFetchTeas();
		}
		isSearch.current = false;
	}, [categoryId, sort.sortProperty]);

	const skeleton = [...new Array(8)].map((_, index) => <Skeleton key={index} />); //* –§–∞–ª—å—à–∏–≤—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è —Å–∫–µ–ª–µ—Ç–æ–Ω–∞
	const tea = teaItems
		.filter((obj) => {
			if (obj.title.toLowerCase().includes(searchValue.toLowerCase())) {
				return true;
			} else {
				return false;
			}
		})
		.slice(0, visible)
		.map((obj, index) => <TeaCard key={index} {...obj} />); //* –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ —Ñ–∏–ª—å—Ç—Ä

	return (
		<div className="container">
			<div className="product">
				<Search />
				<Category />
				<Sort />
			</div>
			{status === 'error' ? (
				<div className="product__error">
					<h2>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –û—à–∏–±–∫–∞ üòï</h2>
					<p>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤.</p>
					<p>–í–æ–∑–º–æ–∂–Ω–æ —Å–µ—Ä–≤–µ—Ä –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –≤–∞—à–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ–µ</p>
					<p>–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.</p>
				</div>
			) : (
				<div className="product__items">{status === 'loading' ? skeleton : tea}</div>
			)}

			{visible < teaItems.length && (
				<button className="product__btn-load-more" onClick={showMore}>
					–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ
				</button>
			)}
		</div>
	);
};

export default Home;
